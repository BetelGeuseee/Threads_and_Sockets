/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.chatty;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;

/**
 *
 * @author shirs
 */
class ClientHandler implements Runnable{

    Socket socket;
    javax.swing.JTextArea textArea;
    BufferedReader reader;
    InputStreamReader streamReader;
    OutputStreamWriter streamWriter;
    PrintWriter writer;
    ClientHandler(Socket sock,javax.swing.JTextArea area){
        this.socket=sock;
        textArea=area;
    }
    @Override
    public void run() {
       try{
       streamReader = new InputStreamReader(socket.getInputStream());
           reader = new BufferedReader(streamReader);
           String line=reader.readLine();
           textArea.append(line+" is connected."+"\n");
           System.out.println(line);
           
           streamWriter = new OutputStreamWriter(socket.getOutputStream());
           writer = new PrintWriter(streamWriter);
           writer.println("202");  
           writer.flush();
       }catch(Exception e){
           e.printStackTrace();
       }
    }
    
}
public class ServerGui extends javax.swing.JFrame {

    /**
     * Creates new form ServerGui
     */
   // private int portNumber=4000;
   // private String localhost="127.0.0.1";
    private BufferedReader reader;
    private InputStreamReader streamReader;
    private OutputStreamWriter streamWriter;
   private PrintWriter writer;
    private ServerSocket serverSocket;
    private Socket socket;
    public void connect(){
        textArea.setEditable(false);
        textArea.setForeground(Color.GREEN);
        try{
           
           serverSocket = new ServerSocket(4444); 
           while(true){
          socket = serverSocket.accept();
          Thread thread = new Thread(new ClientHandler(socket,textArea));
          thread.start();
        /*  streamReader = new InputStreamReader(socket.getInputStream());
           reader = new BufferedReader(streamReader);
           String line=reader.readLine();
           textArea.append(line+" is connected."+"\n");
           System.out.println(line);
           
        streamWriter = new OutputStreamWriter(socket.getOutputStream());
          writer = new PrintWriter(streamWriter);
           writer.println("Server: Hello "+line);  
           writer.flush(); */
           }
        }catch(IOException e){
            e.printStackTrace();
        } finally{
            try{
             
       
            }catch(Exception e){
                
            }
        }
    }
    public ServerGui() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        portnumber = new javax.swing.JLabel();
        ipaddress = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        portNum = new javax.swing.JLabel();
        address = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textPane = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        portnumber.setText("Running Port :");

        ipaddress.setText("IP address:");

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        jLabel3.setText("Status");

        portNum.setText("4444");

        address.setText("127.0.0.1");

        jScrollPane2.setViewportView(textPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(portnumber)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(portNum, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ipaddress)
                                .addGap(18, 18, 18)
                                .addComponent(address)))
                        .addGap(75, 75, 75)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(portnumber)
                            .addComponent(portNum))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ipaddress)
                            .addComponent(address))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                        .addComponent(jLabel3))
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
                ServerGui gui=new ServerGui();
                gui.setVisible(true);
                gui.connect();
      
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel address;
    private javax.swing.JLabel ipaddress;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel portNum;
    private javax.swing.JLabel portnumber;
    private javax.swing.JTextArea textArea;
    private javax.swing.JTextPane textPane;
    // End of variables declaration//GEN-END:variables
}
